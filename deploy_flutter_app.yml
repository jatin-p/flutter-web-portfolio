---
- name: Deploy Flutter web app on Ubuntu EC2 instance
  hosts: all
  become: true
  vars:
    ansible_ssh_private_key_file: ~/.ssh/awskey
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: install dependencies
      apt:
        state: latest
        update_cache: true
        pkg:
          - "nginx"
          - "certbot"
          - "python3-certbot-nginx"
          - "apt-transport-https"
          - "ca-certificates"
          - "curl"
          - "gnupg"
          - "software-properties-common"
          - "python3-pip"
          - "virtualenv"
          - "python3-setuptools"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose
      pip:
        name: docker-compose
        state: present

    - name: copy docker config
      copy:
        src: './configs/docker-daemon.json'
        dest: '/etc/docker/daemon.json'
        mode: '0644'

    - name: request initial letsencrypt certificate
      command: certbot certonly --nginx --agree-tos --cert-name '{{ domain }}' -d '{{ domain }}' -m '{{ letsencrypt_contact_email }}'
      args:
        creates: "/etc/letsencrypt/live/{{domain}}/privkey.pem"
    
    - name: create web folder
      file:
        path: "{{item.path}}"
        owner: "{{item.owner}}"
        state: directory
      with_items:
        - path: "/web/{{domain}}/"
          owner: "root"
    - block:
            - name: add template files
              template:
                src: "{{item.src}}"
                dest: "{{item.dest}}"
                mode: "{{item.mode}}"
              with_items:
                - src: "./configs/docker-compose.yml"
                  dest: "/web/{{domain}}/docker-compose.yml"
                  mode: "0600"
                - src: "./configs/nginx_internal.conf"
                  dest: "/web/{{domain}}/nginx_internal.conf"
                  mode: "0644"
                - src: "./configs/nginx.conf"
                  dest: "/etc/nginx/sites-available/{{domain}}.conf"
                  mode: "0644"

            - block:
                - name: gather stats on site enabled config
                  stat:
                    path: "/etc/nginx/sites-enabled/{{domain}}.conf"
                  register: reg_enabled

                - name: remove if regular file (legacy) instead of symlink
                  file:
                    path: "/etc/nginx/sites-enabled/{{domain}}.conf"
                    state: absent
                  when: reg_enabled.stat.exists and reg_enabled.stat.isreg

                - name: enable nginx site
                  file:
                    src: "../sites-available/{{domain}}.conf"
                    dest: "/etc/nginx/sites-enabled/{{domain}}.conf"
                    state: link

    - name: enable and start docker service
      systemd:
        name: docker
        enabled: yes
        state: started

        # - name: Change the working directory to /opt
        #   ansible.builtin.shell:
        #     cmd: find .                    # To list files under /opt directory
        #     chdir: /opt                    # changes to /opt directory
        #     register: shell_output
        # - debug: var=shell_output

    - name: start docker-compose
      docker_compose:
        project_src: "{{lemmy_base_dir}}/{{domain}}"
        state: present
        pull: yes
        remove_orphans: yes

    - name: reload nginx with new config
      shell: nginx -s reload

    - name: certbot renewal cronjob
      cron:
        special_time: daily
        name: certbot-renew-lemmy
        user: root
        job: "certbot certonly --nginx --cert-name '{{ domain }}' -d '{{ domain }}' --deploy-hook 'nginx -s reload'"
    # - name: Pull Flutter web app Docker image
    #   docker_image:
    #     name: jatinkpa/flutter-web-portfolio:0.1
    #     state: present
    #     source: pull

    # - name: Copy NGINX configuration
    #   copy:
    #     src: ./configs/nginx.conf
    #     dest: /etc/nginx/nginx.conf

    # - name: Install NGINX
    #   apt:
    #     name: nginx
    #     state: present

    # - name: Enable and start NGINX service
    #   service:
    #     name: nginx
    #     state: started
    #     enabled: yes

    # - name: Expose NGINX HTTP port
    #   ufw:
    #     rule: allow
    #     port: '80'
    #     proto: tcp

    # - name: Expose HTTPS port
    #   ufw:
    #     rule: allow
    #     port: '443'
    #     proto: tcp

    # - name: Run Docker container for Flutter web app
    #   docker_container:
    #     name: flutter_web_app
    #     image: jatinkpa/flutter-web-portfolio:0.1
    #     state: started
    #     ports:
    #       - "8080:80"